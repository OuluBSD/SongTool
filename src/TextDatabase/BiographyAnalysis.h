#ifndef _TextDatabase_BiographyAnalysis_h_
#define _TextDatabase_BiographyAnalysis_h_


BEGIN_TEXTLIB_NAMESPACE


/*	These have been made only for male-perspective because of the lack of time.
	Also, making the profiles for roles is really exhausting manual labor...
*/


#define SOCIETYROLE_LIST \
	SOCIETYROLE(WIFE) \
	SOCIETYROLE(BEST_MAN) \
	SOCIETYROLE(MOTHER) \
	SOCIETYROLE(FATHER) \
	SOCIETYROLE(LITTLE_SISTER) \
	SOCIETYROLE(LITTLE_BROTHER) \
	SOCIETYROLE(BIG_SISTER) \
	SOCIETYROLE(BIG_BROTHER) \
	SOCIETYROLE(MATERNAL_GRANDMOTHER) \
	SOCIETYROLE(MATERNAL_GRANDFATHER) \
	SOCIETYROLE(PATERNAL_GRANDMOTHER) \
	SOCIETYROLE(PATERNAL_GRANDFATHER) \
	SOCIETYROLE(MATERNAL_AUNT) \
	SOCIETYROLE(MATERNAL_UNCLE) \
	SOCIETYROLE(PATERNAL_AUNT) \
	SOCIETYROLE(PATERNAL_UNCLE) \
	SOCIETYROLE(MATERNAL_FEMALE_COUSIN) \
	SOCIETYROLE(MATERNAL_MALE_COUSIN) \
	SOCIETYROLE(PATERNAL_FEMALE_COUSIN) \
	SOCIETYROLE(PATERNAL_MALE_COUSIN) \
	\
	SOCIETYROLE(FEMALE_IN_INTERNET_SHALLOW_IMAGE_SITE) \
	SOCIETYROLE(  MALE_IN_INTERNET_SHALLOW_IMAGE_SITE) \
	SOCIETYROLE(FEMALE_IN_INTERNET_SHALLOW_REEL_VIDEO_SITE) \
	SOCIETYROLE(  MALE_IN_INTERNET_SHALLOW_REEL_VIDEO_SITE) \
	SOCIETYROLE(FEMALE_IN_INTERNET_SHALLOW_PUBLIC_MESSAGE_SITE) \
	SOCIETYROLE(  MALE_IN_INTERNET_SHALLOW_PUBLIC_MESSAGE_SITE) \
	SOCIETYROLE(FEMALE_IN_INTERNET_SHALLOW_VIDEO_STREAMING_SITE) \
	SOCIETYROLE(  MALE_IN_INTERNET_SHALLOW_VIDEO_STREAMING_SITE) \
	SOCIETYROLE(FEMALE_IN_INTERNET_MODERATE_FULL_PROFILE_SITE) \
	SOCIETYROLE(  MALE_IN_INTERNET_MODERATE_FULL_PROFILE_SITE) \
	SOCIETYROLE(FEMALE_IN_INTERNET_MODERATE_VIDEO_SITE) \
	SOCIETYROLE(  MALE_IN_INTERNET_MODERATE_VIDEO_SITE) \
	SOCIETYROLE(FEMALE_IN_INTERNET_PROFSSIONAL_INDUSTRY_SITE) \
	SOCIETYROLE(  MALE_IN_INTERNET_PROFSSIONAL_INDUSTRY_SITE) \
	SOCIETYROLE(FEMALE_IN_INTERNET_SOCIAL_MUSIC_SITE) \
	SOCIETYROLE(  MALE_IN_INTERNET_SOCIAL_MUSIC_SITE) \
	SOCIETYROLE(FEMALE_IN_INTERNET_SOCIAL_PROGRAMMING_SITE) \
	SOCIETYROLE(  MALE_IN_INTERNET_SOCIAL_PROGRAMMING_SITE) \
	SOCIETYROLE(FEMALE_IN_INTERNET_FORUM_MUSIC) \
	SOCIETYROLE(  MALE_IN_INTERNET_FORUM_MUSIC) \
	SOCIETYROLE(FEMALE_IN_INTERNET_FORUM_PROGRAMMING) \
	SOCIETYROLE(  MALE_IN_INTERNET_FORUM_PROGRAMMING) \
	SOCIETYROLE(FEMALE_IN_INTERNET_WEBSITE_READER) /* a person who reads a website */ \
	SOCIETYROLE(  MALE_IN_INTERNET_WEBSITE_READER) \
	SOCIETYROLE(FEMALE_IN_INTERNET_MUSIC_COOPERATION_SITE) \
	SOCIETYROLE(  MALE_IN_INTERNET_MUSIC_COOPERATION_SITE) \
	SOCIETYROLE(FEMALE_IN_INTERNET_PROGRAMMING_COOPERATION_SITE) \
	SOCIETYROLE(  MALE_IN_INTERNET_PROGRAMMING_COOPERATION_SITE) \
	\
	SOCIETYROLE(FEMALE_PEER_IN_MILITARY_SERVICE) \
	SOCIETYROLE(  MALE_PEER_IN_MILITARY_SERVICE) \
	SOCIETYROLE(FEMALE_SUPERIOR_IN_MILITARY_SERVICE) \
	SOCIETYROLE(  MALE_SUPERIOR_IN_MILITARY_SERVICE) \
	SOCIETYROLE(FEMALE_INFERIOR_IN_MILITARY_SERVICE) \
	SOCIETYROLE(  MALE_INFERIOR_IN_MILITARY_SERVICE) \
	\
	SOCIETYROLE(DAUGHTER) \
	SOCIETYROLE(SON) \
	SOCIETYROLE(FEMALE_RECRUITER_FOR_WORK) \
	SOCIETYROLE(  MALE_RECRUITER_FOR_WORK) \
	SOCIETYROLE(FEMALE_IN_INTERNET_REPUBLICAN_PUBLIC_MESSAGE_SITE) \
	SOCIETYROLE(  MALE_IN_INTERNET_REPUBLICAN_PUBLIC_MESSAGE_SITE) \
	SOCIETYROLE(FEMALE_IN_INTERNET_INFLUENCER_FOR_ART_AND_MUSIC) \
	SOCIETYROLE(  MALE_IN_INTERNET_INFLUENCER_FOR_ART_AND_MUSIC) \
	\
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_RIGHTS_OF_MUSIC_PRODUCERS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_INTEREST_OF_MUSIC_PRODUCERS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_RIGHTS_OF_MUSIC_COMPOSERS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_INTEREST_OF_MUSIC_COMPOSERS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_RIGHTS_OF_MUSIC_LYRICISTS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_INTEREST_OF_MUSIC_LYRICISTS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_RIGHTS_OF_MUSIC_PUBLISHERS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_INTEREST_OF_MUSIC_PUBLISHERS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_RIGHTS_OF_PERFORMING_ARTISTS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_INTEREST_OF_PERFORMING_ARTISTS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_RIGHTS_OF_RECORD_COMPANIES) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_INTEREST_OF_RECORD_COMPANIES) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_RIGHTS_OF_MUSIC_JOURNALISTS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_INTEREST_OF_MUSIC_JOURNALISTS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_RIGHTS_OF_MUSICIANS_AND_MUSIC_WORKERS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_INTEREST_OF_MUSICIANS_AND_MUSIC_WORKERS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_RIGHTS_OF_MUSIC_INDUSTRY) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_INTEREST_OF_MUSIC_INDUSTRY) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_RIGHTS_OF_MUSIC_EDUCATORS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_INTEREST_OF_MUSIC_EDUCATORS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_RIGHTS_OF_MUSIC_RECORD_ARCHIVERS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_INTEREST_OF_MUSIC_RECORD_ARCHIVERS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_RIGHTS_OF_ACCOUNTANTS_OF_MUSIC_PRODUCERS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_INTEREST_OF_ACCOUNTANTS_OF_MUSIC_PRODUCERS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_RIGHTS_OF_MUSIC_ARTIST_MANAGERS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_INTEREST_OF_MUSIC_ARTIST_MANAGERS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_RIGHTS_OF_MUSIC_CONSUMERS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_INTEREST_OF_MUSIC_CONSUMERS) \
	\
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_RIGHTS_OF_COMPUTER_PROGRAMMERS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_INTEREST_OF_COMPUTER_PROGRAMMERS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_RIGHTS_OF_ACCOUNTANTS_OF_COMPUTER_PROGRAMMERS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_INTEREST_OF_ACCOUNTANTS_OF_COMPUTER_PROGRAMMERS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_RIGHTS_OF_SOFTWARE_COMPANIES) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_INTEREST_OF_SOFTWARE_COMPANIES) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_RIGHTS_OF_SOFTWARE_INDUSTRY) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_INTEREST_OF_SOFTWARE_INDUSTRY) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_RIGHTS_OF_SOFTWARE_PROJECT_MANAGERS) \
	SOCIETYROLE(REPRESENTATIVE_OF_THE_ORGANIZATION_FOR_INTEREST_OF_SOFTWARE_PROJECT_MANAGERS) \
	\
	SOCIETYROLE(ANGRY_PERSON_IN_THE_INTERNET) \
	SOCIETYROLE(EMPATHETIC_PERSON_IN_THE_INTERNET) \
	SOCIETYROLE(CURIOUS_PERSON_IN_THE_INTERNET) \
	SOCIETYROLE(ENTHUSIASTIC_PERSON_IN_THE_INTERNET) \
	SOCIETYROLE(SKEPTICAL_PERSON_IN_THE_INTERNET) \
	SOCIETYROLE(CONFUSED_PERSON_IN_THE_INTERNET) \
	SOCIETYROLE(EMOTIONAL_PERSON_IN_THE_INTERNET) \
	SOCIETYROLE(CRITICAL_PERSON_IN_THE_INTERNET) \
	SOCIETYROLE(MOTIVATIONAL_PERSON_IN_THE_INTERNET) \
	SOCIETYROLE(SUPPORTIVE_PERSON_IN_THE_INTERNET) \
	SOCIETYROLE(ANXIOUS_PERSON_IN_THE_INTERNET) \
	SOCIETYROLE(HUMOROUS_PERSON_IN_THE_INTERNET) \
	SOCIETYROLE(DEFENSIVE_PERSON_IN_THE_INTERNET) \
	SOCIETYROLE(OVERWHELMED_PERSON_IN_THE_INTERNET) \
	SOCIETYROLE(NOSTALGIC_PERSON_IN_THE_INTERNET) \
	SOCIETYROLE(OBJECTIVE_PERSON_IN_THE_INTERNET) \



enum {
	#define SOCIETYROLE(x) SOCIETYROLE_##x,
	SOCIETYROLE_LIST
	#undef SOCIETYROLE
	
	SOCIETYROLE_COUNT
};

String GetSocietyRoleEnum(int i);
String GetSocietyRoleKey(int i);
String GetSocietyRoleDescription(int i);


struct RoleProfile {
	String name, profile;
	
	
	void Set(String name, String profile) {this->name = name; this->profile = profile;}
	
	void Jsonize(JsonIO& json) {
		json
			("name", name)
			;
	}
};

const Array<RoleProfile>& GetRoleProfile(int role_i);

#define SOCIETYROLE_SCORE_LIST \
	SOCIETYROLE_SCORE(FAMILY_CHOSEN_BY_ME) \
	SOCIETYROLE_SCORE(FAMILY_CAUSED_BY_MY_PARENTS) \
	SOCIETYROLE_SCORE(GENERAL_PUBLIC) \
	SOCIETYROLE_SCORE(EMOTIONAL_PEOPLE) \
	SOCIETYROLE_SCORE(REPRESENTATIVE_FOR_RIGHTS_OF_SOMEONE) \
	\
	SOCIETYROLE_SCORE(REPRESENTATIVE_FOR_INTEREST_OF_SOMEONE) \
	SOCIETYROLE_SCORE(FEMALE) \
	SOCIETYROLE_SCORE(MALE) \
	SOCIETYROLE_SCORE(MUSIC_RELATED) \
	SOCIETYROLE_SCORE(COMPUTER_RELATED) \
	\
	SOCIETYROLE_SCORE(WORK_RELATED) \
	SOCIETYROLE_SCORE(MILTARY_RANK_RELATED) \
	SOCIETYROLE_SCORE(SHALLOWNESS) \
	SOCIETYROLE_SCORE(PROFESSIONALISM) \


enum {
	#define SOCIETYROLE_SCORE(x) SOCIETYROLE_SCORE_##x,
	SOCIETYROLE_SCORE_LIST
	#undef SOCIETYROLE_SCORE
	
	SOCIETYROLE_SCORE_COUNT
};

String GetSocietyRoleScoreKey(int i);
String GetSocietyRoleScoreEnum(int i);


struct SocietyRoleAnalysis {
	int scores[SOCIETYROLE_SCORE_COUNT] = {0,0,0,0,0, 0,0,0,0,0, 0,0,0,0};
	
	
	void Jsonize(JsonIO& json);
	int GetScoreSum() const;
	
};



enum {
	BIOSCORE_EMPATHY,
	BIOSCORE_ATTRACTION,
	BIOSCORE_VALUE,
	BIOSCORE_LEADERSHIP,
	
	BIOSCORE_COUNT
};

enum {
	PLATDESC_MODE_FINAL,
	PLATDESC_MODE_FINAL_DIALECT,
	PLATDESC_MODE_FINAL_TRANSLATED,
	PLATDESC_MODE_FINAL_TRANSLATED_DIALECT,
	
	PLATDESC_MODE_COUNT,
};

enum {
	PLATDESC_LEN_FULL,
	PLATDESC_LEN_1280_CHARS,
	PLATDESC_LEN_160_CHARS,
	PLATDESC_LEN_40_CHARS,
	
	PLATDESC_LEN_COUNT,
};

inline String GetPlatformDescriptionModeKey(int i) {
	switch (i) {
		case PLATDESC_MODE_FINAL: return "engf";
		case PLATDESC_MODE_FINAL_DIALECT: return "engfd";
		case PLATDESC_MODE_FINAL_TRANSLATED: return "transf";
		case PLATDESC_MODE_FINAL_TRANSLATED_DIALECT: return "transfd";
		default: TODO; return "error";
	}
}

inline String GetPlatformDescriptionLengthKey(int i) {
	switch (i) {
		case PLATDESC_LEN_FULL: return "full";
		case PLATDESC_LEN_1280_CHARS: return "1280";
		case PLATDESC_LEN_160_CHARS: return "160";
		case PLATDESC_LEN_40_CHARS: return "40";
		default: TODO; return "error";
	}
}

inline int GetPlatformDescriptionLength(int i) {
	switch (i) {
		case PLATDESC_LEN_FULL: return 0;
		case PLATDESC_LEN_1280_CHARS: return 1280;
		case PLATDESC_LEN_160_CHARS: return 160;
		case PLATDESC_LEN_40_CHARS: return 40;
		default: TODO; return 0;
	}
}




struct PlatformBiographyAnalysis {
	Vector<String> packed_reactions;
	String profile_description_from_biography;
	String descriptions[PLATDESC_LEN_COUNT][PLATDESC_MODE_COUNT];
	bool platform_enabled = false;
	
	void Jsonize(JsonIO& json) {
		json
			("packed_reactions", packed_reactions)
			("profile_description_from_biography", profile_description_from_biography)
			("platform_enabled", platform_enabled)
			;
		for(int i = 0; i < PLATDESC_LEN_COUNT; i++) {
			for(int j = 0; j < PLATDESC_MODE_COUNT; j++) {
				String key = GetPlatformDescriptionModeKey(j) + "_" + GetPlatformDescriptionLengthKey(i);
				json(key, descriptions[i][j]);
			}
		}
	}
};

struct BiographyRoleAnalysis {
	
	Vector<String> merged_biography_reactions;
	
	void Jsonize(JsonIO& json) {
		json
			("merged_biography_reactions", merged_biography_reactions)
			;
	}
	
};

struct BiographyProfileAnalysis {
	struct Response : Moveable<Response> {
		int year, category;
		String text, keywords;
		double score[BIOSCORE_COUNT] = {0,0,0,0};
		void Jsonize(JsonIO& json) {
			json
				("year", year)
				("cat", category)
				("txt", text)
				("keyw", keywords)
				;
			for(int i = 0; i < BIOSCORE_COUNT; i++)
				json("sc" + IntStr(i), score[i]);
		}
	};
	
	Vector<Response> responses;
	VectorMap<int, String> categories;
	String biography_reaction;
	
	void Jsonize(JsonIO& json) {
		json
			("responses", responses)
			("categories", categories)
			("biography_reaction", biography_reaction)
			;
	}
};

struct BiographyAnalysis {
	Array<Array<BiographyProfileAnalysis>> profiles;
	Array<BiographyRoleAnalysis> roles;
	Array<PlatformBiographyAnalysis> platforms;
	
	void Realize();
	void Jsonize(JsonIO& json) {
		json
			("profiles", profiles)
			("roles", roles)
			("platforms", platforms)
			;
	}
	Index<int> GetRequiredRoles() const;
	Index<int> GetRequiredCategories() const;
	//BiographyCategory& GetAdd(Owner& o, int enum_);
	
};


END_TEXTLIB_NAMESPACE


#endif
